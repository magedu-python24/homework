第三周作业
【一：章节学习】
Python列表和元组：    
        01-列表乘法反转排序；
        02-浅拷贝深拷贝和随机数；
        03-元组和命名元组；
        04-排序问题的多种解法和冒泡法；
课程习题精讲(3)与字符串操作：
        01-质数多种解法及效率；
        02-杨辉三角基本解法和补零法；
        03-杨辉三角对称解法和单行列表解法；
        04-字符串join和分割；
字符串与切片：
        01-字符串替换查找排版格式化；
        02-字符串习题讲解；
        03-bytes和bytearray及编码；
        04-切片        
【二：本周作业】：请同学们把作业提交到Github哦~~提交时间最迟本周日
1. 说明列表的浅拷贝和深拷贝的区别
2. 说明列表和元组的相同点和不同点
3. 请写出字符串支持的所有方法及说明（例如: lower 返回字符串的小写）
4. 使用选择排序算法实现排序[3, 5, 1, 7, 9, 6, 8]
5. 有如下一个字符串变量logs，请统计出每种请求类型的数量（提示：空格分割的第2列是请求类型），得到如下输出：
POST 2
GET 3
下边是logs变量：
logs = '''
111.30.144.7 "POST /mock/login/?t=GET HTTP/1.1" 200 
111.30.144.7 "Get /mock/users/?t=POST HTTP/1.1" 200 
111.13.100.92 "Post /mock/login/ HTTP/1.1" 200 
223.88.60.88 "GET /mock/users/?t=POST HTTP/1.1" 200 
111.30.144.7 "GET /mock/users/ HTTP/1.1" 200 
【三、答案】、

1.
浅拷贝只是复制了对象的引用地址，两个对象指向同一个内存地址，所以修改其中任意的值，另一个值都会随之变化
深拷贝是将对象及值复制过来，两个对象修改其中任意的值另一个值不会改变

2.
列表和元组的相同点：均可使用索引，且可通过索引查询
列表和元组的不同点：
1）表示方式不一致，列表是[],元组是（）
2）列表是可变类型，元祖是不可变类型
3）列表可增加、插入、删除元素，元组只读，无增、删、改方法

3.
1）字符串join连接："string"join(interable)
2）字符串+相连
3）字符串分割
    split(sep=None,maxsplit=-1)：从左至右，sep指定分割符，缺省情况下空白字符串作为分隔符，maxsplit指定分割次数。-1表示遍历整个字符串
	rsplit(sep=None,maxsplit=-1):从右至左，sep指定分割符，缺省情况下空白字符串作为分隔符，maxsplit指定分割次数。-1表示遍历整个字符串
	splitlines([keepends]):按照行分割，keepends是否保留行分隔符，行分隔符包括：\n \r\n \r
	partition(sep):从左至右。遇到分隔符就把字符串分成两部分，返回头、分隔符、尾三部分的三元组；sep是分隔字符串，必须指定
	rpartition(sep):从右至左。遇到分隔符就把字符串分成两部分，返回头、分隔符、尾三部分的三元组；sep是分隔字符串，必须指定
4）字符串大小写
	upper()全大写
	lower()全小写
	swapcase()：交互大小写
5）字符串排版
	title()：标题的每个单词都大写
	capitalize()：首个单词大写
	center(width[,fillchar]):打印宽度，fillchar是填充的字符
	zfill（width）：打印宽度，居右，左边用0填充
	ljust(width[,fillchar])：左对齐
	rjust(width[,fillchar])：右对齐
6）字符串修改
	replace(old,new[,count])：count表示替换次数，不指定就全部去除
	strip([chars]):从字符串两端去除指定的字符集chars中所有字符，无指定去除空白字符
7）字符串查找
	find(sub[.start[,end]])
	rfind(sub[.start[,end]])
	index(sub[.start[,end]])
	rindex(sub[.start[,end]])
	len(string)
	count(sub[.start[,end]])
8）字符串判断
	endswith(suffix[.start[,end]])
	startswith(suffix[.start[,end]])
	is系列
		isalnum()
		isalpha()
		isdecimal()
		isdigit()
		isidentifier()
		isupper()
		islower()
		isspace()
9）字符串格式化:"{} {xxx}".format(*args,**kargs)

4.排序

5.统计出每种请求类型的数量
join
	"string".join(可迭代对象)
	通过string将可迭代对象连接起来，可迭代对象必须为字符串类型
	返回一个新的字符串

split
	ls.split("分隔符"，maxsplit=-1)
	通过指定分隔符，对字符串进行分割，maxsplit表示最大分割次数，-1表示遍历整个字符串
	返回一个新的字符串

rsplit
	与split类似处理，方向从右向左

splitlines
	ls.splitines()
	使用行来切分字符串
	分隔符包括\n \r \r\n
	返回一个新的字符串

partition
	ls.partition("分隔符")
	从左向右，首次遇到分隔符就将字符串划分成头、分隔符、尾三部分
	返回新的字符串
	如果分隔符未找到，则返回头、空、空三元组

upper
	ls.upper()
	全部大写，返回新字符串

lower
	ls.lower()
	全部小写，返回新字符串

swapcase
	ls.swapcase()
	大小写互转，返回新字符串

replace
	ls.replace("原字符","替换后字符",替换次数)
	用替换后字符替换原字符
	返回新的字符串

strip
	ls.strip("指定两端去除的字符")
	从字符串两端删除指定字符，直到第一个非指定字符出现为止
	\n \r \t以及空格，要注明显示
	返回新字符串
	未指定字符，则去除空格

rstrip/lstrip
	与strip类似
	只从右或者左删除

find
	ls.find("子串"，开始位置，截至位置)
	从字符串中查找字串，返回子串开始的索引，可以指定开始索引以及截至索引位置
	返回正索引值
	没有找到返回-1

rfind
	与find类似，从右边开始查找
	返回正索引值

index
	ls.index("子串"，开始位置，截至位置)
	从字符串中查找子串，返回子串开始的索引，可以指定开始索引以及截至索引位置
	返回正索引值
	没有找到，抛出异常

rindex
	与index类似，从右边开始查找
	返回正索引值

len
	len(ls)
	返回字符串长度

count
	ls.count("子串"，起始位置，截至位置)
	从字符串中统计子串出现的次数，可以指定子串出现的起始索引和终止索引
	返回次数，整型
	
startswith
	ls.startswith("子串"，开始位置，截至位置)
	在字符串开始位置，到截至位置统计，是否以子串开头
	返回布尔值数据
	
endswith
	ls.startswith("子串"，开始位置，截至位置)
	在字符串开始位置，到截至位置统计，是否以子串结尾
	返回布尔值数据

isalnum
	ls.isalnum()
	判断字符串是否由字母跟数字组成
	返回布尔值数据

isalpha
	ls.isalpha()
	判断字符串是否是字母组成
	返回布尔值数据

isdecimal
	ls.isdecimal()
	判断字符串是否只包含十进制数字
	返回布尔值数据

isdigit
	ls.isdigit()
	判断字符串是否全部由数字组成
	返回布尔值数据

isidentifier
	ls.isidentifier()
	判断是不是字母和下划线开头，其他都是字母、数字、下划线
	返回布尔值数据

islower
	ls.islower()
	判断是不是都是小写
	返回布尔值数据

isupper
	ls.isupper()
	判断是不是都是大写
	返回布尔值数据

isspace
	ls.isspace()
	判断是不是只包含空格字符
	返回布尔值数据

format
	"{}:{}".format("","")
	格式化字符串函数
	
1. 说明列表的浅拷贝和深拷贝的区别
浅拷贝是指新变量和旧变量内容指向相同的内存地址，深拷贝是新变量会重新扩展一块内存存放内容，该内容与原来变量值相同。

2. 说明列表和元组的相同点和不同点
相同点 ： list 与 tuple 都是序列类型的容器对象，可以存放任何类型的数据、支持切片、迭代等操作
不同点：元组存放的元素唯一不能相同 而列表可以存放相同的元素 即tuple是不可变类型，大小固定，而 list 是可变类型、数据可以动态变化

3. 请写出字符串支持的所有方法及说明（例如: lower 返回字符串的小写）
lower 返回字符串的小写
upper 返回字符串的大写
tile 返回所有首字母大写 其它字母小写
capitalize 返回第一个单词首字母大写 其余小写
swapcase 对字符串中的所有大小写字母进行互换 （大写变小写 小写变大写）

isdecimal 判断是否为数字
isapha 判断是否为字母
isalnum 判断是否为字母数字组合

islower 判断是否为小写字母
isupper 判断是否为大写字母
istitle 判断单词全部首字母大写

isspace 判断是否为空白
isprintable 判断是否可打印
isidentifier 判断是否满足标识符规则

center(width[, fillchar]) 将字符串居中 左右两边使用fillchar进行填充 默认使用空格填充
>>> print('ab'.center(4,'_'))
_ab_

ljust(width[, fillchar]) 左对齐字符串 右边用fillchar填充
>>> print('xyz'.ljust(5,'_'))
xyz__

rjust(witdth[,fillchar]) 右对齐字符串 左侧用fillchar填充
>>> print('xyz'.rjust(5,'_'))
__xyz

zfill(width) 用0填充在字符串的左边使其满足长度 witdth
>>> print('abc'.zfill(5))
00abc

count(sub[, start[, end]]) 返回字符串中出现子串sub的次数 可以指定索引的开始以及终止位置
>>> print('xyabxyxy'.count('xy',1,7))
1

endswith(suffix[, start[, end]]) 检查字符串是否以suffix结尾
startswith(prefix[, start[, end]]) 检查字符串是否以prefix开始

find(sub[, start[, end]]) 查找字符串中是否包含子串sub包含的话 返回sub所在的位置

replace(old, new[, count]) 将字符串中的子串old替换为new字符串，如果给定count，则表示只替换前count个old子串

expandtabs(N) 将字符串中的\t替换为一定数量的空格 N默认为8 （8个为一组 空格的数量为 8-（\t）前面的字符数量）

partition(sep)  搜索字符串中的子串sep，并从sep处对S进行分割，最后返回一个包含3元素的元组
>>> print('abcxyzopq'.partition('xy'))
('abc', 'xy', 'zopq')

rpartition(sep) 从右边第一个sep进行分割 返回三元素的元组

split(sep=None, maxsplit=-1)  根据sep对S进行分割，maxsplit用于指定分割次数，如果不指定maxsplit或者给定值为"-1"，则会从左向右搜索并且每遇到sep一次就分割直到搜索完字符串。如果不指定sep或者指定为None，则改变分割算法：以空格为分隔符，且将连续的空白压缩为一个空格。
splitlines([keepends=True])  根据换行符 \n \r \r\n 如果指定keepends为True，则保留所有的换行符

s.join(iterable) 将可迭代对象(iterable)中的元素使用s连接起来。注意，iterable中必须全部是字符串类型，否则报错
>>> L='python'
>>> '_'.join(L)
'p_y_t_h_o_n'

strip([chars])  lstrip([chars]) rstrip([chars]) 分别是移除左右两边、左边、右边的字符char。如果不指定chars或者指定为None，则默认移除空白(空格、制表符、换行符)。

format ^, <, > 分别是居中、左对齐、右对齐，后面带宽度， : 号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。
4. 使用选择排序算法实现排序[3, 5, 1, 7, 9, 6, 8]
方法一： 自创 😁😁
list1 = [3, 5, 1, 7, 9, 6, 8]
list2 = []

while list1:
    LarNum = list1[0]
    LarNumInd = 0
    for i in range(1,len(list1)):
        if list1[i] > LarNum:
            LarNum = list1[i]
            LarNumInd = list1.index(LarNum)
    list1[LarNumInd] = list1[-1]
    list1[-1] = LarNum
    list1.pop()
    list2.append(LarNum)

list2.reverse()
print("重新排列后的数组为：")
print(list2)

方法二：选择排序法
list1 = [3, 5, 1, 7, 9, 6, 8]
length =  len(list1)
for i in range(length):
    MaxIndex = i
    for j in range(i+1,length):
        if list1[MaxIndex] < list1[j]:
            MaxIndex = j
    if MaxIndex != i:
        list1[MaxIndex],list1[i] = list1[i],list1[MaxIndex]
print(list1)



5. 有如下一个字符串变量logs，请统计出每种请求类型的数量（提示：空格分割的第2列是请求类型），得到如下输出：

POST 2

GET 3

下边是logs变量：
logs = '''

111.30.144.7 "POST /mock/login/?t=GET HTTP/1.1" 200

111.30.144.7 "Get /mock/users/?t=POST HTTP/1.1" 200

111.13.100.92 "Post /mock/login/ HTTP/1.1" 200

223.88.60.88 "GET /mock/users/?t=POST HTTP/1.1" 200

111.30.144.7 "GET /mock/users/ HTTP/1.1" 200

'''


PostNum = 0
GetNum = 0
ListLog = logs.splitlines()
for i in ListLog:
    if len(i) < 1:
        ListLog.remove(i)
ListLog.pop()

for str in ListLog:
    LogSplit = str.split()
    ActionType = LogSplit[1]
    ActionType = ActionType.lower()
    if "post" in ActionType:
        PostNum += 1
    else:
        GetNum += 1
print("POST ",PostNum)
print("GET ",GetNum)
1. 什么是杨辉三角和转置矩阵（文字说明即可）？

2. 说明列表和Set集合的相同点和不同点。



3. 请写出Set集合支持的所有方法及说明（例如：add 向Set集合中添加一个元素）



4. 请写出字典支持的所有方法及说明（例如：pop 从字典中移除指定的key并返回其value）


5. 请写出Python内建函数及说明（参考：https://docs.python.org/3/library/functions.html）

  1)abs()    返回数字的绝对值，如果参数是复数，则返回其大小
             语法：abs(x)
             x -- 数值表达式，可以是整数，浮点数，复数

  2)all()    用于判断给定的可迭代参数iterable中的所有元素是否都为True，如果是则返回True，否则返回False（元素除了 0、空、None、False外都算True）。
             语法：all(iterable)
             iterable -- 元组或列表

  3)any()    用于判断给定的可迭代参数iterable是否全部为False，则返回False，如果有一个为 True，则返回 True。
             语法：any(iterable)
             iterable -- 元组或列表

  4)ascii()  返回一个表示对象的字符串, 但是对于字符串中的非ASCII字符则返回通过repr()函数使用 \x, \u 或 \U 编码的字符。
             语法：ascii(object)
             object -- 对象

  5)bin()    返回一个整数int或者长整数long int的二进制表示。
             语法：bin(x)

  6)bool()   用于将给定参数转换为布尔类型，如果没有参数，返回False。
             语法：bool(x)

  7)breakpoint() ?????

  8)bytearray()   返回一个新字节数组。这个数组里的元素是可变的，并且每个元素的值范围: 0 <= x < 256。
                  语法：bytearray([source[, encoding[, errors]]])
            说明：如果 source 为整数，则返回一个长度为 source 的初始化数组；
                  如果 source 为字符串，则按照指定的 encoding 将字符串转换为字节序列；
                  如果 source 为可迭代类型，则元素必须为[0 ,255] 中的整数；
                  如果 source 为与 buffer 接口一致的对象，则此对象也可以被用于初始化 bytearray。
                  如果没有输入任何参数，默认就是初始化数组为0个元素。

  9)bytes()   返回一个新的bytes对象，该对象是一个0 <= x < 256区间内的整数不可变序列。它是bytearray的不可变版本
              语法：bytes([source[, encoding[, errors]]])

  10)callable()   用于检查一个对象是否是可调用的。如果返回True，object仍然可能调用失败；但如果返回False，调用对象object绝对不会成功。
                  语法：callable(object)

  11)chr()   用一个整数作参数，返回一个对应的字符。
             语法：chr(i)

  12)classmethod()   classmethod修饰符对应的函数不需要实例化，不需要self参数，但第一个参数需要是表示自身类的cls参数，可以来调用类的属性，类的方法，实例化对象等。
                     语法：classmethod

  13)compile()  将一个字符串编译为字节代码。
                语法：compile(source, filename, mode[, flags[, dont_inherit]])
           说明：source -- 字符串或者AST（Abstract Syntax Trees）对象。
                filename -- 代码文件名称，如果不是从文件读取代码则传递一些可辨认的值。
                mode -- 指定编译代码的种类。可以指定为 exec, eval, single。
                flags -- 变量作用域，局部命名空间，如果被提供，可以是任何映射对象。。
                flags和dont_inherit是用来控制编译源码时的标志

  14)complex()  用于创建一个值为real + imag * j的复数或者转化一个字符串或数为复数。如果第一个参数为字符串，则不需要指定第二个参数。
                语法：complex([real[, imag]])
                real -- int, long, float或字符串；imag -- int, long, float；

  15)delattr()  用于删除属性。
                语法：elattr(object, name)
                object -- 对象；name -- 必须是对象的属性。

  16)dict()  用于创建一个字典。
             语法：1）class dict(**kwarg)
                  2）class dict(mapping, **kwarg)
                  3）class dict(iterable, **kwarg)
                  **kwargs -- 关键字； mapping -- 元素的容器； iterable -- 可迭代对象。

  17)divmod()  接收两个数字类型（非复数）参数，返回一个包含商和余数的元组(a // b, a % b)。
               语法：divmod(a, b)

  18)enumerate()  用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在for循环当中。
                  语法：enumerate(sequence, [start=0])
                  sequence -- 一个序列、迭代器或其他支持迭代对象； start -- 下标起始位置。
  19)eval()  用来执行一个字符串表达式，并返回表达式的值。

  20)exec()  执行储存在字符串或文件中的 Python 语句，相比于eval，exec可以执行更复杂的Python代码。
             语法：exec(object[, globals[, locals]])

  21)filter() 用于过滤序列，过滤掉不符合条件的元素，返回一个迭代器对象，如果要转换为列表，可以使用 list() 来转换。
              该函数接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判，然后返回True或False，最后将返回True的元素放到新列表中。
              语法：filter(function, iterable)

  22)float()  用于将整数和字符串转换成浮点数。
              语法：float([x])
  23)format()  一种格式化字符串的函数
                语法：str.format()

  24)frozenset()  返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。
                 语法：frozenset([iterable])

  25)getattr()  用于返回一个对象属性值。
                语法：getattr(object, name[, default])

  26)globals()  以字典类型返回当前位置的全部全局变量。
                语法：globals()

  27)hasattr()  用于判断对象是否包含对应的属性。
                语法：hasattr(object, name)
  28)hash()  用于获取取一个对象（字符串或者数值等）的哈希值。
             语法：hash(object)

  29)help()  用于查看函数或模块用途的详细说明。
             语法：help([object])

  30)hex()  用于将一个指定数字转换为 16 进制数。
            语法：hex(x)

  31)id()  用于获取对象的内存地址。
           语法：id([object])

  32)input()  接受一个标准输入数据，返回为 string 类型。
              语法：input([prompt])

  33)int()   用于将一个字符串或数字转换为整型。
             语法：int(x, base=10)

  34)isinstance()  判断一个对象是否是一个已知的类型，类似 type()。
                   语法：isinstance(object, classinfo)

  35)iter()  用来生成迭代器。
             语法：iter(object[, sentinel])

  36)len()   返回对象（字符、列表、元组等）长度或项目个数。
             语法: len(x)

  37)list()  用于将元组或字符串转换为列表。
             语法：list(seq)

  38)locals()  以字典类型返回当前位置的全部局部变量。
               语法：locals()

  39)map()  根据提供的函数对指定序列做映射。第一个参数function以参数序列中的每一个元素调用function函数，返回包含每次function函数返回值的新列表。
            语法：map(function, iterable, ...)

  40)max()  返回给定参数的最大值，参数可以为序列。
            语法：max( x, y, z, .... )

  41)memoryview()  返回给定参数的内存查看对象(Momory view)。所谓内存查看对象，是指对支持缓冲区协议的数据进行包装，在不需要复制对象基础上允许Python代码访问。
                   语法：memoryview(obj)

  42）min() 返回给定参数的最小值，参数可以为序列。
            语法：min( x, y, z, .... )

  43)next()  返回迭代器的下一个项目。
             语法：next(iterator[, default])

  44)object()

  45)oct()  将一个整数转换成8进制字符串。
            语法：oct(x)

  46)open()  用于打开一个文件，并返回文件对象
             语法：open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)
             说明：file参数是必需的，其他都是可选的，mode默认为‘r’

  47)ord()  是chr()函数（对于8位的ASCII字符串)的配对函数，它以一个字符串（Unicode 字符）作为参数，返回对应的ASCII数值，或者Unicode数值。
            语法：ord(c)

  48)pow()  返回 xy（x的y次方）的值。
            语法：1）math模块 -- math.pow(x,y) ==>float   2) 内置 -- pow (x, y[,z]) ===>int

  49)print()  用于打印输出
              语法：print(*objects, sep=' ', end='\n', file=sys.stdout)
              说明：以上参数均为非必需

  50)property()  作用是在新式类中返回属性值。
                 语法：property([fget[, fset[, fdel[, doc]]]])
                 说明：fget -- 获取属性值的函数 fset -- 设置属性值的函数
                      fdel -- 删除属性值函数 doc -- 属性描述信息

  51)range()  返回的是一个可迭代对象（类型是对象）
              语法：1）range(stop)
                   2）range(start, stop[, step])

  52)repr()  将对象转化为供解释器读取的形式
             语法：repr(object)

  53)reversed() 返回一个反转的迭代器。
                语法：reversed(seq)
                seq -- 要转换的序列，可以是 tuple, string, list 或 range。

  54)round()  返回浮点数x的四舍五入值。
              round( x [, n] )

  55)set()  创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。
            语法：set([iterable])
            iterable -- 可迭代对象对象

  56)setattr()  对应函数getattr()，用于设置属性值，该属性不一定是存在的。
                语法：setattr(object, name, value)

  57)slice()  实现切片对象，主要用在切片操作函数里的参数传递。
              语法：1）slice(stop)
                    2）slice(start, stop[, step])

  58)sorted()  对所有可迭代的对象进行排序操作。
               语法：sorted(iterable, key=None, reverse=False)
               key -- 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。
               reverse -- 排序规则，reverse = True 降序 ， reverse = False 升序（默认）。

  59)staticmethod()   返回函数的静态方法。
                      语法：staticmethod(function)

  60)str()   将对象转化为适于人阅读的形式。
             语法：str(object='')

  61)sum()  对系列进行求和计算。
            语法：sum(iterable[, start])
            start -- 指定相加的参数，如果没有设置这个值，默认为0。

  62)super()  用于调用父类(超类)的一个方法。
              语法：super(type[, object-or-type])
              type -- 类  object-or-type -- 类，一般是 self

  63)tuple()  将列表转换为元组。
              语法：tuple( seq )

  64)type() 如果你只有第一个参数则返回对象的类型，三个参数返回新的类型对象。
            语法：1）type(object)
                 2）type(name, bases, dict)
                 name -- 类的名称 bases -- 基类的元组 dict -- 字典，类内定义的命名空间变量

  65)vars()   返回对象object的属性和属性值的字典对象。
              语法：vars([object])

  66)zip()  用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象
            语法：zip([iterable, ...])

  67)__import__()  用于动态加载类和函数
                   语法：__import__(name[, globals[, locals[, fromlist[, level]]]])
                   name -- 模块名

  68）dir() 不带参数时，返回当前范围内的变量、方法和定义的类型列表；带参数时，返回参数的属性、方法列表。
            如果参数包含方法__dir__()，该方法将被调用。如果参数不包含__dir__()，该方法将最大限度地收集参数信息。
            语法：dir([object])
            object -- 对象、变量、类型

  69）issubclass()  用于判断参数class是否是类型参数classinfo的子类。
                    语法：issubclass(class, classinfo)


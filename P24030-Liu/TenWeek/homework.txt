1.集合(set)元素去重的判断依据是什么
    set的去重是通过两个函数__hash__和__eq__结合实现的
    当两个变量的哈希值不相同时,就认为这两个元素是不同的
    当两个变量哈希值一样时,调用__eq__方法,当返回值为True时认为这两个元素相同的,应该去重


2.总结本周视频讲解魔术方法的作用及什么情况会执行到该方法
    实例化:
        __new__       实例化一个对象
                      该方法需要返回一个值,如果该值不是cls的实例,则不会调用 __init__
                      该方法永远都是静态方法
                      __new__ 方法很少使用,即使创建了该方法,也会使用 return super().__new__(cls) 基类object的 __new__ 方
                      法来创建实例并返回
    hash:
        __hash__      内建函数 hash() 调用的返回值,返回一个整数。如果定义这个方法该类的实例就可hash。

        __eq__        对应==操作符,判断2个对象是否相等,返回bool值

    bool:
        __bool__      内建函数bool(),或者对象放在逻辑表达式的位置,调用这个函数返回布尔值。
                      没有定义 __bool__ (),就找 __len__ ()返回长度,非0为真。
                      如果 __len__ ()也没有定义,那么所有实例都返回真
    
    可视化:
        __repr__      调用 __repr__ 方法返回字符串表达,如果 __repr__ 也没有定义,就直接返回object的定义,就是显示内存地址信息
    
        __str__       str()函数、format()函数、print()函数调用,需要返回对象的字符串表达。如果没有定义,就去调用 
    
        __repr__      方法返回字符串表达,如果 __repr__ 没有定义,就直接返回对象的内存地址信息
    
        __bytes__     bytes()函数调用,返回一个对象的bytes表达,即返回bytes对象

    运算符重载:
        <,<=,==,>,>=,!=   对应  __lt__,__le__,__eq__,__gt__,__ge__,__ne__    比较运算符
 
        +,-,*,/,%,//,**,divmod  对应 __add__,__sub__,__mul__,__truediv__,__mod__,__floordiv__,__pow__,__divmod__ 算数运算符

        +=,-=,*=,/=,%=,//=,**=  对应  __iadd__,__isub__,__imul__,__itruediv__,%=,//=,**= __imod__,__ifloordiv__,__ipow__ 赋值算术运算符

    容器:
        __len__       内建函数len(),返回对象的长度(>=0的整数),如果把对象当做容器类型看,就如同list
                      或者dict。bool()函数调用的时候,如果没有 __bool__() 方法,则会看 __len__() 方法
                      是否存在,存在返回非0为真

        __iter__      迭代容器时,调用,返回一个新的迭代器对象

        __contains__  in 成员运算符,没有实现,就调用 __iter__ 方法遍历
 
        __getitem__   实现self[key]访问。序列对象,key接受整数为索引,或者切片。对于set和dict,key为hashable。key不存在引发KeyError异常

        __setitem__   和 __getitem__ 的访问类似,是设置值的方法

        __missing__   字典或其子类使用 __getitem__() 调用时,key不存在执行该方法

    可调用对象:
        __call__      类中定义一个该方法,实例就可以像函数一样调用

    上下文管理对象:
    当一个对象同时实现了 __enter__ ()和 __exit__ ()方法,它就属于上下文管理的对象

        __enter__     进入与此对象相关的上下文,如果存在该方法,with语法会把该方法的返回值作为绑定到as子句中指定的变量上

        __exit__      退出与此对象相关的上下文

    反射:
        __getattr__   一个类的属性会按照继承关系找,如果找不到,就会执行 __getattr__() 方法,如果没有这个方法,就会抛出
                      AttributeError异常表示找不到属性。

        __setattr__  可以拦截对实例属性的增加、修改操作,如果要设置生效,需要自己操作实例的__dict__

        __delattr__  可以阻止通过实例删除属性的操作,但是通过类依然可以删除属性

   描述器:
       Python中,一个类实现了 __get__ 、 __set__ 、 __delete__ 三个方法中的任何一个方法,就是描述器。
       如果仅实现了 __get__ ,就是非数据描述符 non-data descriptor;
       同时实现了 __get__ 、 __set__ 就是数据描述符 data descriptor

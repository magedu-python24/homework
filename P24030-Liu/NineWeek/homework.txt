什么是类和实例并说明他们的关系
    类是抽象的概念,是万事万物的抽象,是一类事物的共同特征的集合.
    实例是类的具体实现.

类的实例方法,类方法和静态方法分别如果定义举例说明,并总结它们的应用场景
    class A:
        #类方法:
        #1. 在类定义中,使用@classmethod装饰器修饰的方法
        #2. 必须至少有一个参数,且第一个参数留给了cls,cls指代调用者即类对象自身
        #3. cls这个标识符可以是任意合法名称,但是为了易读,请不要修改
        #4. 通过cls可以直接操作类的属性
        #5. 适用与操作类属性进行类行为的时候
        @classmethod
        def class_method(cls):
            print('class = {0.__name__} ({0})'.format(cls))


        #静态方法
        #1. 在类定义中,使用@staticmethod装饰器修饰的方法
        #2. 调用时,不会隐式的传入参数
        #3. 静态方法只是表明这个方法属于这个名词空间,函数归在一起,方便组织管理
        #4. 适用定义与类无关的方法
        @staticmethod
        def static_method():
            print('static method')


        #普通方法
        #1. 普通方法需要对象的实例作为第一参数
        #2. 最常用的方法,用于给实例定义方法
        def method(self):
            print("{}'s method".format(self))

        
MRO是什么,描述其查找顺序
        为了解决多继承带来路径选择问题,Python使用MRO(method resolution order方法解析顺序)解决基类搜索顺序问题.
        历史原因,MRO有三个搜索算法:
             经典算法,按照定义从左到右,深度优先策略(2.2版本之前)
             新式类算法,经典算法的升级,深度优先,重复的只保留最后一个(2.2版本)
             C3算法,在类被创建出来的时候,就计算出一个MRO有序列表(2.3之后),Python3唯一支持的算法,C3算法解决了多继承的二义性

Mixin是什么,描述其应用场景
        Mixin本质上就是多继承实现的
        Mixin体现的是一种组合的设计模式
        在面向对象的设计中,一个复杂的类,往往需要很多功能,而这些功能有来自不同的类提供,这就需要很多的类组合在一起.设计模式的角度来说,多组合,少继承,这时就可以采用Mixin设计模式

1.理解并发与并行
    并发 concurrency:
        在一个时间段做某些事,但同一时间点只会执行一件事
    并行 parallel:
        同时做某些事,多个事件在同一时间点同时执行

2.理解线程与进程,并说明它们的应用场景
    进程:分配资源的基本单位,每个拥有自己独立的虚拟地址空间,拥有自己独立的堆栈
    线程:系统调度和分派的基本单位,属于同一进程的所有线程都具有相同的地址空间
    进程的优点：
        编程相对容易,通常不需要考虑锁和同步资源的问题.
        更强的容错性:比起多线程的一个好处是一个进程崩溃了不会影响其他进程.
        有内核保证的隔离：数据和错误隔离.
    线程的优点:
        创建速度快,方便高效的数据共享
        较轻的上下文切换开销:不用切换地址空间,不用更改寄存器,不用刷新TLB.
    由于Python GIL的存在,CPU密集型用多进程,IO密集型易适用多线程

3.Python中的GIL是什么,它影响什么
    GIL Golbal Interpreter Lock:CPython 在解释器进程级别有一把锁,叫做GIL全局解释器锁
        GIL 保证CPython进程中,只有一个线程执行字节码.甚至是在多核CPU的情况下,也是只能允许一个CPU上的一个线程在运行.
        Python中绝大多数内置数据结构的读、写操作都是原子操作.由于GIL的存在,Python的内置数据类型在多线程编程的时候就变成了安全的了,但是实际上它们本身不是线程安全类型
        Python由于GIL的存在,CPU密集型的程序,一个线程可能会连续的获得GIL,导致其它线程几乎无法执行,所以不适用与多线程编程.而IO密集型的程序,由于IO导致线程阻塞,就会调度其他线程,所以适用与多线程编程

4.创建两个线程,其中一个输出1-26,另外一个输出A-Z,最终输出:1A 2B 3C...
